/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-03-03 11:22:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;
import java.sql.*;
import javax.servlet.http.*;
import javax.servlet.*;

public final class DrBooking_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Doctor Profile</title>\r\n");
      out.write("    <!-- Bootstrap CSS -->\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <!-- Bootstrap icons -->\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css\" rel=\"stylesheet\">\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("        	font-family: \"Poppins\", sans-serif;\r\n");
      out.write("            padding-top: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .card {\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write(" \r\n");
      out.write("    	<style type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("      body {\r\n");
      out.write("        background-color: #f0f0f0;\r\n");
      out.write("        font-family: \"Poppins\", sans-serif;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .doctor-card {\r\n");
      out.write("        color: #ffffff;\r\n");
      out.write("        padding: 20px;\r\n");
      out.write("        margin-bottom: 20px;\r\n");
      out.write("        position: relative;\r\n");
      out.write("        display: flex; /* Use flexbox for layout */\r\n");
      out.write("        align-items: center; /* Center align content vertically */\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .doctor-card h5 {\r\n");
      out.write("        margin-bottom: 15px;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .doctor-card h3 {\r\n");
      out.write("        margin-top: 20px;\r\n");
      out.write("        color: #00594d;\r\n");
      out.write("        font-family: \"Poppins\", sans-serif;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .doctor-card p {\r\n");
      out.write("      	color: #646569;\r\n");
      out.write("        font-size: 17px;\r\n");
      out.write("        margin-bottom: 5px;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .doctor-card .user-img {\r\n");
      out.write("        width: 170px; /* Set width of the image */\r\n");
      out.write("        height: auto; /* Maintain aspect ratio */\r\n");
      out.write("        margin-top: 20px%;\r\n");
      out.write("        border-radius: 10%; /* Rounded corners */\r\n");
      out.write("        margin-left: 20px; /* Margin for spacing */\r\n");
      out.write("        margin-right: 50px; /* Margin for spacing */\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .doctor-card-content {\r\n");
      out.write("        flex: 1; /* Take up remaining space */\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .doctor-card a {\r\n");
      out.write("        text-decoration: none;\r\n");
      out.write("        color: #e8bd70;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .doctor-card-tag {\r\n");
      out.write("      background-color: #e8bd70;\r\n");
      out.write("      color: #ffffff;\r\n");
      out.write("      border-radius: 5px;\r\n");
      out.write("      padding: 5px 10px;\r\n");
      out.write("      margin-bottom: 10px;\r\n");
      out.write("      margin-right: 10px;\r\n");
      out.write("      font-size: 14px;\r\n");
      out.write("      text-transform: uppercase;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    btn:hover {\r\n");
      out.write("	background-color: #E8BD70;\r\n");
      out.write("	color: white;\r\n");
      out.write("}\r\n");
      out.write("	</style>\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("        function bookAppointment(doctorID,patientID, shift, day) {\r\n");
      out.write("            if (confirm(\"Are you sure you want to book this appointment?\")) {\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    url: 'BookAppointmentServlet',\r\n");
      out.write("                    method: 'POST',\r\n");
      out.write("                    data: { doctorID: doctorID, patientID: patientID, shift: shift, day: day },\r\n");
      out.write("                    success: function(response) {\r\n");
      out.write("                        alert(response);\r\n");
      out.write("                    },\r\n");
      out.write("                    error: function(xhr, status, error) {\r\n");
      out.write("                        alert(\"An error occurred while booking the appointment.\");\r\n");
      out.write("                        console.error(error);\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h1 class=\"mt-5\" style=\"color: #00594d; margin-bottom: -40px;\">Doctor Profile</h1>\r\n");
      out.write("        <div class=\"mt-4\">\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
 String doctorID = request.getParameter("doctorID"); 
      out.write("\r\n");
      out.write("			");
 String patientID = request.getParameter("patientID"); 
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");

                Connection conn = null;
                PreparedStatement pstmtDoctor = null;
                PreparedStatement pstmtSchedule = null;
                ResultSet rsDoctor = null;
                ResultSet rsSchedule = null;
                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/fitfinity", "root", "");

                    // Query to retrieve doctor information based on doctorID
                   String sql = "SELECT d.doctorID, d.doctorName, d.doctorEmail, d.doctorTel, dp.deptName, r.roleName " +
                   "FROM doctors d " +
                   "LEFT JOIN departments dp ON d.deptID = dp.deptID " +
                   "LEFT JOIN roles r using (roleID)" +
                   "WHERE d.doctorID = ?";
                    pstmtDoctor = conn.prepareStatement(sql);
                    pstmtDoctor.setString(1, doctorID);
                    rsDoctor = pstmtDoctor.executeQuery();

                    // Display doctor information
                    if (rsDoctor.next()) {
            
      out.write("\r\n");
      out.write("                        </div>\r\n");
      out.write("                           	<div class=\"col-md-6\">\r\n");
      out.write("						    <div class=\"doctor-card\">\r\n");
      out.write("						        <div class=\"doctor-card-content\">\r\n");
      out.write("						            <h3> Dr. ");
      out.print( rsDoctor.getString("doctorName") );
      out.write("</h3>\r\n");
      out.write("						            <p>Email: ");
      out.print( rsDoctor.getString("doctorEmail") );
      out.write("</p>\r\n");
      out.write("						            <p>Tel: ");
      out.print( rsDoctor.getString("doctorTel") );
      out.write("</p>\r\n");
      out.write("						            <p>Department: ");
      out.print( rsDoctor.getString("deptName"));
      out.write("</p>\r\n");
      out.write("						            <p>Role: ");
      out.print( rsDoctor.getString("roleName"));
      out.write("</p>\r\n");
      out.write("						         \r\n");
      out.write("						        </div>\r\n");
      out.write("						        ");
 if((rsDoctor.getString("doctorName").substring(0,2).equals("U "))){ 
      out.write("\r\n");
      out.write("						        <img class=\"user-img\" src=\"./assets/image/doctorProfile/maleDr.png\" alt=\"Doctor Image\" />\r\n");
      out.write("						        ");
}else{ 
      out.write("\r\n");
      out.write("						        <img class=\"user-img\" src=\"./assets/image/doctorProfile/femaleDr.png\" alt=\"Doctor Image\" />\r\n");
      out.write("						        ");
 } 
      out.write("\r\n");
      out.write("						    </div>\r\n");
      out.write("			        		</div>\r\n");
      out.write("\r\n");
      out.write("                        <!-- Query to retrieve doctor's schedule -->\r\n");
      out.write("                        <h2 class=\"mt-4\" style=\"color: #00594d;\">Doctor's Schedule</h2>\r\n");
      out.write("                        <table class=\"table\">\r\n");
      out.write("                            <thead>\r\n");
      out.write("                                <tr style=\"border-bottom: 1px solid #E8BD70\">\r\n");
      out.write("                                    <th>Day</th>\r\n");
      out.write("                                    <th>Shift</th>\r\n");
      out.write("                                    <th>Action</th> <!-- New column for action button -->\r\n");
      out.write("                                </tr>\r\n");
      out.write("                            </thead>\r\n");
      out.write("                            <tbody>\r\n");
      out.write("                            ");
 
                                // Query to retrieve doctor's schedule based on doctorID
                                String sqlSchedule = "SELECT * FROM doctorschedules WHERE doctorID = ?";
                                pstmtSchedule = conn.prepareStatement(sqlSchedule);
                                pstmtSchedule.setString(1, doctorID);
                                rsSchedule = pstmtSchedule.executeQuery();

                                // Display doctor's schedule
                                while (rsSchedule.next()) {
                            
      out.write("\r\n");
      out.write("                                    <tr style=\"border-bottom: 1px solid #E8BD70\">\r\n");
      out.write("                                        <td>");
      out.print( rsSchedule.getString("day") );
      out.write("</td>\r\n");
      out.write("                                        <td>");
      out.print( rsSchedule.getString("shift") );
      out.write("</td>\r\n");
      out.write("                                        <td>\r\n");
      out.write("                                            <button style=\"background-color: #0bb288; color: white;\" class=\"btn\" onclick=\"bookAppointment('");
      out.print( doctorID );
      out.write("', '");
      out.print( patientID );
      out.write("' , '");
      out.print( rsSchedule.getString("shift") );
      out.write("', '");
      out.print( rsSchedule.getString("day") );
      out.write("' )\">Book Appointment</button>\r\n");
      out.write("                                        </td> <!-- Button to book appointment -->\r\n");
      out.write("                                    </tr>\r\n");
      out.write("                            ");

                                }
                            
      out.write("\r\n");
      out.write("                            </tbody>\r\n");
      out.write("                        </table>\r\n");
      out.write("            ");

                    } else {
            
      out.write("\r\n");
      out.write("                        <p class=\"alert alert-danger\">Doctor not found</p>\r\n");
      out.write("            ");

                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    // Close resources
                    try {
                        if (rsDoctor != null) rsDoctor.close();
                        if (pstmtDoctor != null) pstmtDoctor.close();
                        if (rsSchedule != null) rsSchedule.close();
                        if (pstmtSchedule != null) pstmtSchedule.close();
                        if (conn != null) conn.close();
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                }
            
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
